//Global variables:
let messagesContainer = document.getElementById('messagesContainer');
let messageInput = document.getElementById('messageInput');

/**
 * It sends a post call to the backend server so that it creates a new object (class Message) with the information the user provides 
 * (the message the user types in the input field). Then, after the Python index function has created the new message in the database 
 * and sent it back in json format, this function receives it displays it in the messages container.
 * @param {string} token - This is the user that's logged in.
 * @param {string} user - This is the token generated by Django.
 */
async function sendMessage(token, user) {

    if (messageInput.value !== '') {

        let fd = new FormData();
        /* let token = document.querySelector('[name=csrfmiddlewaretoken]').value; */ //This is another way to get the value of the token.

        fd.append('textMessage', messageInput.value);
        fd.append('csrfmiddlewaretoken', token);

        try {

            messagesContainer.innerHTML += `

                <div class="message-container" id="beforeResponse">
                    <span class="user-span"><b>${user}:</b></span>
                    <span class="message-span"><i>${messageInput.value}</i></span>
                    <span class="first-check">&#10004;</span>
                    <span class="date-span">...<span>
                </div>

            `;

            //This is the post call.
            let response = await fetch('/chatroom/', {
                method: 'POST',
                body: fd
            })

            //This is the response from the backend server.
            let responseAsJson = await response.json();

            let parsedJson = JSON.parse(responseAsJson);

            let date = parsedJson.fields.created_at;

            let [year, month, day] = date.split('-');

            let convertedDate = [returnMonthInLetters(month), returnDayPlusComma(day), year].join(' ');

            let beforeResponse = document.getElementById('beforeResponse');

            beforeResponse.remove();

            messagesContainer.innerHTML += `
            
                <div class="message-container">
                    <span class="user-span"><b>${user}:</b></span>
                    <span class="message-span"><i>${messageInput.value}</i></span>
                    <span class="first-check">&#10004;</span>
                    <span class="second-check">&#10004;</span>
                    <span class="date-span">${convertedDate}<span>
                </div>

            `;

            messageInput.value = '';

        } catch (e) {

            console.log(e);

        }

    } else {

        alert('Please write something before clicking the "SEND" button. It is not possible to post an empty message.');

    }

}

/**
 * Takes a month number (a number from 1 to 12) and returns its corresponding month in letters (1 = January, 2 = February etc.).
 * @param {string} month - This is the month number the function takes.
 * @returns - (in letters) the month that corresponds to the month number.
 */
function returnMonthInLetters(month) {

    let monthToNum = Number(month);

    let monthsArr = [
        
        ['January', 1], ['February', 2], ['March', 3], ['April', 4], ['May', 5], ['June', 6], 
        ['July', 7], ['August', 8], ['September', 9], ['October', 10], ['November', 11], ['December', 12]
    
    ];

    for (let i = 0; i < monthsArr.length; i++) {
        const monthInLetters = monthsArr[i][0];
        const monthValue = monthsArr[i][1];
        if (monthValue === monthToNum) {
            month = monthInLetters;
        }
    }

    return month;
}

/**
 * Takes a day and returns it with a comma.
 * @param {string} day - This is the day the function takes.
 * @returns - the same day with a comma.
 */
function returnDayPlusComma(day) {

    return day + ',';

}

/**
 * Removes from the messages container the messages that don't match the search query.
 */
function searchForMessages() {
    
    let input, filter, container, messages;

    input = document.getElementById('searchBar');

    filter = input.value.toUpperCase();

    container = document.getElementById('messagesContainer');

    messages = container.querySelectorAll('.message-span');

    //Loops through all messages and hides those (actually their containers) that don't match the search query.
    for (i = 0; i < messages.length; i++) {
        let messageContent = messages[i].textContent || messages[i].innerText;
        let message = messages[i];
        let parentDiv = message.parentNode;
        if (messageContent.toUpperCase().indexOf(filter) > -1) {
            parentDiv.classList.remove('d-none');
        } else {
            parentDiv.classList.add('d-none');
        }
    }

}